"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toString = exports.toJSON = exports.sleep = exports.guid = exports.getEnvValue = void 0;
const types = require("./types");
function getEnvValue(name, type) {
    if (!process)
        return;
    const value = process.env[`APPLITOOLS_${name}`];
    if (value === undefined || value === 'null')
        return;
    if (type === 'boolean' && types.isBoolean(value))
        return (value === 'true');
    if (type === 'number')
        return Number(value);
    return value;
}
exports.getEnvValue = getEnvValue;
function guid() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {
        const r = (Math.random() * 16) | 0;
        const v = c === 'x' ? r : (r & 0x3) | 0x8;
        return v.toString(16);
    });
}
exports.guid = guid;
function sleep(ms) {
    if (types.isNumber(ms)) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}
exports.sleep = sleep;
function toJSON(object, props) {
    if (!types.isObject(object))
        return null;
    const original = Object.values(props);
    const keys = types.isArray(props) ? original : Object.keys(props);
    return keys.reduce((plain, key, index) => {
        const value = object[original[index]];
        plain[key] = value && types.isFunction(value.toJSON) ? value.toJSON() : value;
        return plain;
    }, {});
}
exports.toJSON = toJSON;
function toString(object) {
    return `${this.constructor.name} ${JSON.stringify(object, null, 2)}`;
}
exports.toString = toString;
//# sourceMappingURL=general.js.map